apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-configmap
  namespace: todo-app
data:
  # This should be the public URL where your frontend will be available.
  # It's used for CORS configuration in your backend.
  FrontendOrigin: "https://todo-app.10.1.8.174.nip.io:31003"
  ASPNETCORE_ENVIRONMENT: "Production"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: todo-app
type: Opaque
stringData:
  # The full connection string for the database.
  # It uses the Kubernetes service name 'postgres-svc'.
  ConnectionStrings__TodosDb: "Host=postgres-svc;Port=5432;Database=todos;Username=admin;Password=password"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: todo-app
spec:
  replicas: 1 # Start with one, can be scaled later
  selector:
    matchLabels:
      app: todo-api
  template:
    metadata:
      labels:
        app: todo-api
    spec:
      initContainers:
      - name: check-db-ready
        image: postgres:16
        command: ['sh', '-c', 
          'until pg_isready -h postgres-svc -p 5432; do echo waiting for database; sleep 2; done;']
      containers:
        - name: backend
          # IMPORTANT: Replace this with your actual image path from GHCR
          image: ghcr.io/wedgehov/todo-api:v1.0.3
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: backend-configmap
            - secretRef:
                name: backend-secret
          # Probes to check if the application is healthy
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: backend-svc
  namespace: todo-app
spec:
  selector:
    app: todo-api
  ports:
    - protocol: TCP
      port: 8080 # Service port
      targetPort: 8080 # Container port